package com.lk.td.pay.fragment;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import com.hx.view.wedget.refresh.PullRefreshLayout;import com.hx.view.wedget.refresh.PullRefreshLayout.OnRefreshListener;import com.hx.view.widget.CustomDialog;import com.lk.td.pay.activity.account.AccountInfoActivity;import com.lk.td.pay.activity.account.AccountWithdrawActivity;import com.lk.td.pay.activity.account.BindBankCardActivity;import com.lk.td.pay.activity.account.EquListActivity;import com.lk.td.pay.activity.account.PwdManageActivity;import com.lk.td.pay.activity.account.RealNameAuthenticationActivity;import com.lk.td.pay.activity.account.TradeListActivity;import com.lk.td.pay.beans.BasicResponse;import com.lk.td.pay.golbal.MApplication;import com.lk.td.pay.utils.T;import com.pay.code.activity.CreateQRCodeActivity;import com.pay.library.android.http.AsyncHttpResponseHandler;import com.pay.library.bean.User;import com.pay.library.config.AppConfig;import com.pay.library.config.Urls;import com.pay.library.request.IntentParams;import com.pay.library.request.ParamsUtils;import com.pay.library.tool.Logger;import com.pay.library.tool.MyHttpClient;import com.pay.library.tool.Utils;import com.pay.library.uils.AmountUtils;import com.pay.library.uils.HStartActivity;import com.td.app.pay.hx.R;import org.apache.http.Header;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;import java.util.Map;public class MerchantFragment extends BaseFragment implements OnClickListener {    public static BaseFragment newInstance() {        BaseFragment fragment = new MerchantFragment();        return fragment;    }    private PullRefreshLayout refresh;    private View layoutView;    private TextView tv_name, tv_account, tv_cardnum, tv_status, tv_balance;    private final static String COMPLETED = "1";    private final static String UNCOMPLETED = "2";    private TextView tv_title;    private ImageView image_code;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        layoutView = inflater.inflate(R.layout.fragment_merchant, container,                false);        initViews();        return layoutView;    }    private void initViews() {        tv_title = (TextView) layoutView.findViewById(R.id.tv_title);        tv_title.setText("我的账户");        refresh = (PullRefreshLayout) layoutView                .findViewById(R.id.refresh_account);        refresh.setOnRefreshListener(onRefresh);        tv_balance = (TextView) layoutView                .findViewById(R.id.tv_uaccount_balance);        layoutView.findViewById(R.id.merchant_account_layout)                .setOnClickListener(this);        layoutView.findViewById(R.id.merchant_auth_text).setOnClickListener(                this);        layoutView.findViewById(R.id.merchant_pwd_text)                .setOnClickListener(this);        layoutView.findViewById(R.id.trade_completed).setOnClickListener(                this);        layoutView.findViewById(R.id.trade_uncompleted).setOnClickListener(this);        layoutView.findViewById(R.id.merchant_contact_layout)                .setOnClickListener(this);        layoutView.findViewById(R.id.merchant_bankcard_layout)                .setOnClickListener(this);        tv_cardnum = (TextView) layoutView                .findViewById(R.id.merchant_bankcardnum_text);        tv_name = findViewById(R.id.tv_uname);        tv_name.setText(User.uName);        tv_account = findViewById(R.id.tv_uaccount);        tv_account.setText(Utils.hiddenMobile(User.uAccount));        tv_status = (TextView) layoutView.findViewById(R.id.merchant_contact_text);        image_code = (ImageView) layoutView.findViewById(R.id.image_code);        image_code.setOnClickListener(this);        image_code.setVisibility(View.VISIBLE);        layoutView.findViewById(R.id.merchant_equ_layout).setOnClickListener(this);        if (User.uStatus == 0) {            tv_status.setText("未认证");        } else if (User.uStatus == 1) {            tv_status.setText("审核中");        } else if (User.uStatus == 2) {            tv_status.setText("已通过");        } else if (User.uStatus == 3) {            tv_status.setText("未通过");        }        if (User.cardBundingStatus == 2) {            tv_cardnum.setText("已绑定");        } else if (User.cardBundingStatus == 0) {            tv_cardnum.setText("未绑定");        } else if (User.cardBundingStatus == 1) {            tv_cardnum.setText("审核中");        } else if (User.cardBundingStatus == 3) {            tv_cardnum.setText("审核未通过");        }        refresh();    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.merchant_account_layout:  //我的账户                Intent accInfo = new Intent(getActivity(),                        AccountInfoActivity.class);                startActivity(accInfo);                break;            case R.id.merchant_auth_text:  //提款到银行账户                if (User.cardBundingStatus != 2) {                    com.lk.td.pay.utils.T.ss("请绑定银行卡通过后再操作");                    return;                }                if (MApplication.getInstance().chechStatus())                    startActivity(new Intent(getActivity(),                            AccountWithdrawActivity.class));                else                    return;                break;            case R.id.merchant_pwd_text:  //密码管理                Intent pwd = new Intent(getActivity(), PwdManageActivity.class);                startActivity(pwd);                break;            case R.id.trade_completed: //交易完成记录                startActivity(new Intent(getActivity(),                        TradeListActivity.class).putExtra("RECORD_TYPE", COMPLETED));                break;            case R.id.trade_uncompleted: //未交易完成记录                startActivity(new Intent(getActivity(),                        TradeListActivity.class).putExtra("RECORD_TYPE", UNCOMPLETED));                break;            case R.id.merchant_contact_layout:  ///实名认证                if (User.uStatus == 1 || User.uStatus == 2) {                    return;                }                if (User.uStatus == 3) {                    CustomDialog.Builder builder = new CustomDialog.Builder(getActivity());                    builder.setTitle("实名审核未通过");                    builder.setMessage(User.ideCardAuthError);                    builder.setOkBtn("去重新实名认证",                            new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog,                                                    int which) {                                    dialog.cancel();                                    getActivity().startActivity(                                            new Intent(getActivity(),                                                    RealNameAuthenticationActivity.class));                                }                            });                    builder.setCancelBtn("知道了",                            new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog,                                                    int which) {                                    dialog.cancel();                                }                            });                    CustomDialog dialog = builder.create();                    dialog.show();                    return;                }                // Intent real=new Intent(getActivity(),Real)                getActivity().startActivity(                        new Intent(getActivity(),                                RealNameAuthenticationActivity.class));                break;            case R.id.merchant_bankcard_layout:  //绑定银行卡                if (User.uStatus == 0) {                    CustomDialog.Builder builder = new CustomDialog.Builder(getActivity());                    builder.setTitle(getString(R.string.tip));                    builder.setMessage(getString(R.string.no_authentication));                    builder.setOkBtn(getString(R.string.go_to_authentication),                            new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog,                                                    int which) {                                    dialog.cancel();                                    getActivity().startActivity(                                            new Intent(getActivity(),                                                    RealNameAuthenticationActivity.class));                                }                            });                    CustomDialog dialog = builder.create();                    dialog.show();                    break;                }                if (User.cardBundingStatus == 3) {                    CustomDialog.Builder builder = new CustomDialog.Builder(getActivity());                    builder.setTitle("银行卡绑定审核未通过");                    builder.setMessage(User.bankCardAuthError);                    builder.setOkBtn("去重新绑定",                            new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog,                                                    int which) {                                    dialog.cancel();                                    startActivity(new Intent(getActivity(), BindBankCardActivity.class).putExtra("action", "1"));                                }                            });                    builder.setCancelBtn("知道了",                            new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog,                                                    int which) {                                    dialog.cancel();                                }                            });                    CustomDialog dialog = builder.create();                    dialog.show();                    return;                }                if (User.cardBundingStatus == 0) {                    startActivity(new Intent(getActivity(), BindBankCardActivity.class).putExtra("action", "1"));                    return;                }                if (User.cardBundingStatus == 2 || User.cardBundingStatus == 1) {                    CustomDialog.Builder builder = new CustomDialog.Builder(getActivity());                    builder.setTitle("修改银行卡");                    builder.setMessage("在信息审核尚未通过期间，用户无法进行资金业务的操作！");                    builder.setOkBtn("确认修改",                            new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog,                                                    int which) {                                    dialog.cancel();                                    startActivity(new Intent(getActivity(), BindBankCardActivity.class).putExtra("action", "2"));                                }                            });                    builder.setCancelBtn("放弃修改",                            new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog,                                                    int which) {                                    dialog.cancel();                                }                            });                    CustomDialog dialog = builder.create();                    dialog.show();                    return;                }                break;            case R.id.merchant_equ_layout:  //设备列表                startActivity(new Intent(getActivity(), EquListActivity.class));                break;            case R.id.image_code: //生成我的二维码				Map<String, Object> map = new HashMap<String, Object>();				map.put(IntentParams.TITLE, getString(R.string.my_share));				map.put(IntentParams.CODE_TITLE, getString(R.string.pay_scan_msg_title));				map.put(IntentParams.CODE_MSG_SHARE, getString(R.string.pay_scan_msg));				map.put(IntentParams.SHOW_BTN, false);				map.put(IntentParams.SCAN_THREAD, false);				map.put(IntentParams.DATA, AppConfig.SHARE_URL +User.uId);				HStartActivity.startActivity(getContext(), CreateQRCodeActivity.class, map);            	break;            default:                break;        }    }    Handler handler = new Handler() {        public void handleMessage(android.os.Message msg) {            if (msg.what == 10) {                System.out.println("refresh-------status");                if (User.uStatus == 0) {                    tv_status.setText("未认证");                } else if (User.uStatus == 1) {                    tv_status.setText("审核中");                } else if (User.uStatus == 2) {                    tv_status.setText("已通过");                } else if (User.uStatus == 3) {                    tv_status.setText("未通过");                }                if (User.cardBundingStatus == 2) {                    tv_cardnum.setText("已绑定");                } else if (User.cardBundingStatus == 0) {                    tv_cardnum.setText("未绑定");                } else if (User.cardBundingStatus == 1) {                    tv_cardnum.setText("审核中");                } else if (User.cardBundingStatus == 3) {                    tv_cardnum.setText("审核未通过");                }            }        }    };    public <T extends View> T findViewById(int id) {        return (T) layoutView.findViewById(id);    }    private void queryBalance() {        MyHttpClient.post(getActivity(), Urls.QUERY_BALANCE,                new HashMap<String, String>(), new AsyncHttpResponseHandler() {                    @Override                    public void onSuccess(int statusCode, Header[] headers,                                          byte[] responseBody) {                        Logger.json("[余额查询]", responseBody);                        try {                            BasicResponse r = new BasicResponse(responseBody)                                    .getResult();                            if (r.isSuccess()) {                                JSONObject obj = r.getJsonBody();                                User.amtT0 = AmountUtils.changeFen2Yuan(obj .optString(ParamsUtils.RESULT_ACT0));                                User.amtT1 = AmountUtils.changeFen2Yuan(obj.optString(ParamsUtils.RESULT_ACT1));                                User.amtT1y = AmountUtils.changeFen2Yuan(obj.optString(ParamsUtils.RESULT_ACT1_Y));                                User.totalAmt = AmountUtils.changeFen2Yuan(obj.optString(ParamsUtils.RESULT_ACBAL));                                User.acT1AP = AmountUtils.changeFen2Yuan(AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_ACT1_AP)));                                User.balance = AmountUtils.changeFen2Yuan( AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_ONCREDIT)));                                User.freeze = AmountUtils.changeFen2Yuan( AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_FREEZE)));                                User.reserveField = AmountUtils.changeFen2Yuan( AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_RESERVEFIELD)));                                User.acT1AP_ACT03 =AmountUtils.changeFen2Yuan(AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_ACT1AP_ACT03)));                                User.acT1AP_ACT04 =AmountUtils.changeFen2Yuan(AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_ACT1AP_ACT04)));                                User.acT1Y_ACT03 =AmountUtils.changeFen2Yuan(AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_ACT1Y_ACT03)));                                User.acT1Y_ACT04 =AmountUtils.changeFen2Yuan(AmountUtils.deletePoint(obj.optString(ParamsUtils.RESULT_ACT1Y_ACT04)));                                                                tv_balance.setText(getAmt(User.acT1AP, User.balance, User.freeze, User.reserveField));                            } else {                                T.ss(r.getMsg());                            }                        } catch (JSONException e) {                            // TODO 自动生成的 catch 块                            e.printStackTrace();                        }                    }                    @Override                    public void onFailure(int statusCode, Header[] headers,                                          byte[] responseBody, Throwable error) {                        // networkError(statusCode, error);                        tv_balance.setText("查询失败,请重试");                    }                    @Override                    public void onStart() {                        super.onStart();                        tv_balance.setText("查询中...");                    }                    @Override                    public void onFinish() {                        super.onFinish();                        refresh.setRefreshing(false);                    }                });    }    public String getAmt(String acT1AP, String balance, String freeze, String reserveField ){        if (TextUtils.isEmpty(acT1AP)){            return "0";        }        double amtTotal = Double.parseDouble(acT1AP);        double mbalance = 0;        double mfreeze = 0;        double acT1AP_ACT03 =0;        double acT1AP_ACT04 =0;        if (TextUtils.isEmpty(balance)){            mbalance = 0;        }else {            mbalance = Math.abs(Double.parseDouble(balance));        }        if (TextUtils.isEmpty(freeze)){            mfreeze = 0;        }else {            mfreeze = Math.abs(Double.parseDouble(freeze));        }        if (TextUtils.isEmpty(User.acT1AP_ACT03)){            acT1AP_ACT03 = 0;        }else {            acT1AP_ACT03 = Double.parseDouble(User.acT1AP_ACT03);        }        if (TextUtils.isEmpty(User.acT1AP_ACT04)){            acT1AP_ACT04 = 0;        }else {            acT1AP_ACT04 = Double.parseDouble(User.acT1AP_ACT04);        }        double amt = amtTotal - mbalance-mfreeze +acT1AP_ACT03+acT1AP_ACT04;        return amt >= 0 ? amt+"" : "0";    }    OnRefreshListener onRefresh = new OnRefreshListener() {        @Override        public void onRefresh() {            refresh();        }    };    private void refresh() {        refreshUserInfo();        queryBalance();    }    private void refreshUserInfo() {        MyHttpClient.post(getActivity(), Urls.GET_USER_INFO,                new HashMap<String, String>(), new AsyncHttpResponseHandler() {                    @Override                    public void onSuccess(int statusCode, Header[] headers,                                          byte[] responseBody) {                        Logger.json("[余额查询]", responseBody);                        try {                            BasicResponse r = new BasicResponse(responseBody)                                    .getResult();                            if (r.isSuccess()) {                                User.uStatus = r.getJsonBody().optInt(                                        "custStatus");                                User.termNum = r.getJsonBody()                                        .optInt("termNum");                                User.cardNum = r.getJsonBody()                                        .optInt("cardNum");                                User.cardBundingStatus = r.getJsonBody().optInt("cardBundingStatus");                                User.ideCardAuthError = r.getJsonBody().optString("ideCardAuthError");//实名认证不通过的意见                                User.bankCardAuthError = r.getJsonBody().optString("bankCardAuthError");//银行卡绑定不通过的意见                               // User.macAddress = r.getJsonBody().optString("macAddress");//蓝牙地址                                //System.out.println("刷新用户信息---" + User.macAddress);                                handler.sendEmptyMessage(10);                            } else {                            }                        } catch (JSONException e) {                            // TODO 自动生成的 catch 块                            e.printStackTrace();                        }                    }                    @Override                    public void onFailure(int statusCode, Header[] headers,                                          byte[] responseBody, Throwable error) {                        // TODO 自动生成的方法存根                    }                    @Override                    public void onStart() {                        super.onStart();                        refresh.setRefreshing(true);                    }                });    }}